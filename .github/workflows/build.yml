name: build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: build
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare build
    runs-on: ubuntu-latest
    outputs:
      mold_nightly_sha: ${{ steps.determine_versions.outputs.mold_nightly_sha }}
      mold_stable_tag: ${{ steps.determine_versions.outputs.mold_stable_tag }}
      tag_name: ${{ steps.determine_tag_name.outputs.tag_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Determine versions
        id: determine_versions
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          nightly_info="$(gh api /repos/rui314/mold/commits/main)"
          mold_nightly_sha="$(jq --raw-output .sha <<<"$nightly_info")"
          mold_nightly_url="$(jq --raw-output .html_url <<<"$nightly_info")"

          stable_info="$(gh api /repos/rui314/mold/releases/latest)"
          mold_stable_tag="$(jq --raw-output .tag_name <<<"$stable_info")"
          mold_stable_url="$(jq --raw-output .html_url <<<"$stable_info")"

          {
            echo "mold_nightly_sha=$mold_nightly_sha"
            echo "mold_nightly_url=$mold_nightly_url"
            echo "mold_stable_tag=$mold_stable_tag"
            echo "mold_stable_url=$mold_stable_url"
          } | tee -a "$GITHUB_OUTPUT"

      - name: Determine release tag name
        id: determine_tag_name
        run: |
          date="$(date +%Y%m%d)"
          tag_name=""

          for revision in {0..15}; do
            if [[ -z "$(git ls-remote --tags origin "refs/tags/$date.$revision")" ]]; then
              tag_name="$date.$revision"
              break
            fi
          done
          if [[ -z "$tag_name" ]]; then
            echo "Error: too many revisions on $date. Aborting." >&2
            exit 1
          fi
          echo "tag_name=$tag_name" | tee -a "$GITHUB_OUTPUT"

      - name: Generate release notes
        id: release_notes
        run: |
          release_title='mold nightly builds ${{ steps.determine_tag_name.outputs.tag_name }}'
          notes_file="release-notes.md"
          cat <<'EOF' | tee -a "$notes_file"
          Nightly: ${{ steps.determine_versions.outputs.mold_nightly_url }}
          Stable: ${{ steps.determine_versions.outputs.mold_stable_url }}
          EOF
          {
            echo "release_title=$release_title"
            echo "notes_file=$notes_file"
          } | tee -a "$GITHUB_OUTPUT"

      - name: Create draft release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create \
            --draft \
            --title='${{ steps.release_notes.outputs.release_title }}' \
            --notes-file='${{ steps.release_notes.outputs.notes_file }}' \
            '${{ steps.determine_tag_name.outputs.tag_name }}'

  build:
    needs: prepare
    strategy:
      matrix:
        arch:
          - x86_64
          - aarch64
          - arm
          - ppc64le
          - s390x
        variant:
          - nightly
          - stable
      fail-fast: false
    name: ${{ matrix.arch }} (${{ matrix.variant }})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Set up nightly build
        if: matrix.variant == 'nightly'
        run: |
          {
            echo 'MOLD_GIT_REF=${{ needs.prepare.outputs.mold_nightly_sha }}'
            echo 'BUILD_SUFFIX=-nightly-${{ matrix.arch }}-linux'
          } | tee -a "$GITHUB_ENV"

      - name: Set up stable build
        if: matrix.variant == 'stable'
        run: |
          {
            echo 'MOLD_GIT_REF=${{ needs.prepare.outputs.mold_stable_tag }}'
            echo 'BUILD_SUFFIX=-${{ needs.prepare.outputs.mold_stable_tag }}-${{ matrix.arch }}-linux'
          } | tee -a "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build mold
        id: build_mold
        run: |
          docker run \
            --rm \
            --interactive \
            --platform='linux/${{ matrix.arch }}' \
            --mount="type=bind,src=$PWD,dst=/root" \
            --workdir="/root" \
            --env="MOLD_GIT_REF=$MOLD_GIT_REF" \
            --env="BUILD_SUFFIX=$BUILD_SUFFIX" \
            --env="SRCDIR=/usr/local/src" \
            --env="OPTDIR=/opt" \
            rui314/mold-builder:latest \
            ./build-mold.sh

          build_output="mold$BUILD_SUFFIX.tar.gz"
          checksum_output="$build_output.sha256"
          sha256sum "$build_output" | tee "$checksum_output"

          {
            echo "build_output=$build_output"
            echo "checksum_output=$checksum_output"
          } | tee -a "$GITHUB_OUTPUT"

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload '${{ needs.prepare.outputs.tag_name }}' \
            '${{ steps.build_mold.outputs.build_output }}' \
            '${{ steps.build_mold.outputs.checksum_output }}'

  publish:
    needs: [prepare, build]
    name: Publish release
    runs-on: ubuntu-latest
    steps:
      - name: Publish release
        run: |
          gh release edit \
            --draft=false \
            --latest \
            '${{ needs.prepare.outputs.tag_name }}'
