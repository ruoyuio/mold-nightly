name: build

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: build
  cancel-in-progress: true

env:
  CMAKE_VERSION: "3.27.6"
  MOLD_STABLE_VERSION: "2.2.0"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: zhongruoyu/gcc-ports:13-xenial
      SRCDIR: /usr/local/src
      PREFIX: /usr/local
      OPTDIR: /opt
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Start Docker container
        run: |
          docker run \
            --name="mold-builder" \
            --detach \
            --interactive \
            --mount="type=bind,src=$PWD,dst=/root" \
            --workdir="/root" \
            "$DOCKER_IMAGE"
      - name: Install CMake
        run: |
          docker exec \
            --env="CMAKE_VERSION=$CMAKE_VERSION" \
            --env="SRCDIR=$SRCDIR" \
            --env="PREFIX=$PREFIX" \
            mold-builder \
            ./install-cmake.sh
      - name: Build mold (nightly)
        id: build_mold_nightly
        env:
          MOLD_GIT_REF: main
          BUILD_SUFFIX: -nightly
        run: |
          docker exec \
            --env="MOLD_GIT_REF=$MOLD_GIT_REF" \
            --env="BUILD_SUFFIX=$BUILD_SUFFIX" \
            --env="SRCDIR=$SRCDIR" \
            --env="OPTDIR=$OPTDIR" \
            mold-builder \
            ./build-mold.sh
          build_output="mold$BUILD_SUFFIX.tar.gz"
          mold_version="$(docker exec mold-builder "$OPTDIR/mold$BUILD_SUFFIX/bin/mold" -v)"
          checksum="$(sha256sum "mold$BUILD_SUFFIX.tar.gz")"
          echo "build_output=$build_output" | tee -a "$GITHUB_OUTPUT"
          echo "mold_version=$mold_version" | tee -a "$GITHUB_OUTPUT"
          echo "checksum=$checksum" | tee -a "$GITHUB_OUTPUT"
      - name: Build mold (stable)
        id: build_mold_stable
        env:
          MOLD_GIT_REF: v${{ env.MOLD_STABLE_VERSION }}
          BUILD_SUFFIX: -${{ env.MOLD_STABLE_VERSION }}
        run: |
          docker exec \
            --env="MOLD_GIT_REF=$MOLD_GIT_REF" \
            --env="BUILD_SUFFIX=$BUILD_SUFFIX" \
            --env="SRCDIR=$SRCDIR" \
            --env="OPTDIR=$OPTDIR" \
            mold-builder \
            ./build-mold.sh
          build_output="mold$BUILD_SUFFIX.tar.gz"
          mold_version="$(docker exec mold-builder "$OPTDIR/mold$BUILD_SUFFIX/bin/mold" -v)"
          checksum="$(sha256sum "mold$BUILD_SUFFIX.tar.gz")"
          echo "build_output=$build_output" | tee -a "$GITHUB_OUTPUT"
          echo "mold_version=$mold_version" | tee -a "$GITHUB_OUTPUT"
          echo "checksum=$checksum" | tee -a "$GITHUB_OUTPUT"
      - name: Tag release
        run: |
          date="$(date +%Y%m%d)"
          TAG_NAME=""
          for revision in {0..16}; do
            if [[ -z "$(git ls-remote --tags origin "refs/tags/$date.$revision")" ]]; then
              TAG_NAME="$date.$revision"
              break
            fi
          done
          if [[ -z "$TAG_NAME" ]]; then
            echo "Error: too many revisions on $date. Aborting." >&2
            exit 1
          fi
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" | tee -a "$GITHUB_ENV"
      - name: Generate release notes
        run: |
          RELEASE_TITLE="mold nightly builds $TAG_NAME"
          NOTES_FILE="release-notes.md"
          cat <<'EOF' | tee -a "$NOTES_FILE"
          ## Nightly (${{ steps.build_mold_nightly.outputs.build_output }})
          mold version: `${{ steps.build_mold_nightly.outputs.mold_version }}`
          SHA-256 checksum: `${{ steps.build_mold_nightly.outputs.checksum }}`
          ## Stable (${{ steps.build_mold_stable.outputs.build_output }})
          mold version: `${{ steps.build_mold_stable.outputs.mold_version }}`
          SHA-256 checksum: `${{ steps.build_mold_stable.outputs.checksum }}`
          EOF
          echo "RELEASE_TITLE=$RELEASE_TITLE" | tee -a "$GITHUB_ENV"
          echo "NOTES_FILE=$NOTES_FILE" | tee -a "$GITHUB_ENV"
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release create \
            --latest \
            --notes-file="$NOTES_FILE" \
            --title="$RELEASE_TITLE" \
            --verify-tag \
            "$TAG_NAME" \
            "${{ steps.build_mold_nightly.outputs.build_output }}" \
            "${{ steps.build_mold_stable.outputs.build_output }}"
